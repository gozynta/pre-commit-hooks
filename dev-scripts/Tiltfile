analytics_settings(True)
disable_snapshots()

local_resource('poetry', 'poetry install --all-extras', deps=['pyproject.toml'])

PROJECT_ROOT = '..'

def get_filelist_from_command(command, working_dir=PROJECT_ROOT, file_separator='\n'):
    out = str(local(command, dir=working_dir))

    # Strip whitespace and file_separator so we don't end up with a '' entry which will
    # end up resolving to working_dir.
    out = out.strip('\r\n \t\0' + file_separator)

    relpath_files =  out.split(file_separator)

    # make filenames absolute paths
    return [ os.path.join(os.path.abspath(working_dir), f) for f in relpath_files ]

def all_pysrc_py_files(project_root):
    return get_filelist_from_command('find pysrc/ -type f -name "*.py"', project_root)

def all_pytest_py_files(project_root):
    return get_filelist_from_command('find pytests/ -type f -name "*.py" -print0', project_root, '\0')

def all_git_files(project_root):
    return get_filelist_from_command('git ls-files -z', project_root, '\0')

# Run tests
local_resource(
    'pytest',
    'poetry run coverage run --source=pysrc -m pytest',
    dir=PROJECT_ROOT,
    deps=all_pysrc_py_files(PROJECT_ROOT)+all_pytest_py_files(PROJECT_ROOT),
    resource_deps=['poetry'],
    labels=['test'],
    allow_parallel=True,
)
local_resource(
    'coverage',
    'poetry run coverage report -m',
    dir=PROJECT_ROOT,
    deps=all_pysrc_py_files(PROJECT_ROOT)+all_pytest_py_files(PROJECT_ROOT),
    resource_deps=['poetry'],
    labels=['test'],
    allow_parallel=True,
)
local_resource(
    'pre-commit',
    'poetry run pre-commit run --all-files --color always',
    dir=PROJECT_ROOT,
    deps=all_git_files(PROJECT_ROOT),
    resource_deps=['poetry'],
    labels=['test'],
    allow_parallel=True,
)
