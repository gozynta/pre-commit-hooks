analytics_settings(True)
disable_snapshots()

PROJECT_ROOT = ".."

# Add a 'poetry lock' resource that's only ever manually triggered.
# poetry.lock should not be auto-updated.  It may bring in new dependency versions that introduce breaking changes.
local_resource(
    "poetry lock",
    "poetry lock",
    deps=[os.path.join(PROJECT_ROOT, "pyproject.toml")],
    labels=["poetry"],
    auto_init=False,
    trigger_mode=TRIGGER_MODE_MANUAL,
)

local_resource(
    "poetry",
    "poetry install --all-extras",
    deps=[os.path.join(PROJECT_ROOT, "poetry.lock"), os.path.join(PROJECT_ROOT, "pyproject.toml")],
    labels=["poetry"],
)


def get_filelist_from_command(command, working_dir=PROJECT_ROOT, file_separator="\n"):
    out = str(local(command, dir=working_dir))

    # Strip whitespace and file_separator so we don't end up with a '' entry which will
    # end up resolving to working_dir.
    out = out.strip("\r\n \t\0" + file_separator)

    relpath_files = out.split(file_separator)

    # make filenames absolute paths
    return [os.path.join(os.path.abspath(working_dir), f) for f in relpath_files]


def get_filelist(working_dir, search_dir, name_mask):
    """
    Find files relative to working_dir, that are in search_dir, that match name_mask.

    Ex: get_filelist(PROJECT_ROOT, 'pysrc/', '*.py') to find all python files within PROJECT_ROOT/pysrc/
    """
    return get_filelist_from_command(
        'find {} -type f -name "{}" -print0'.format(search_dir, name_mask), working_dir, "\0"
    )


def all_pysrc_py_files(project_root):
    return get_filelist(project_root, "pysrc/", "*.py")


def all_pytest_py_files(project_root):
    return get_filelist(project_root, "pytests/", "*.py")


def all_git_files(project_root):
    return get_filelist_from_command("git ls-files -z", project_root, "\0")


# Run tests
local_resource(
    "pytest",
    "poetry run coverage run --source=pysrc -m pytest",
    dir=PROJECT_ROOT,
    deps=all_pysrc_py_files(PROJECT_ROOT) + all_pytest_py_files(PROJECT_ROOT),
    resource_deps=["poetry"],
    labels=["test"],
    allow_parallel=True,
)
local_resource(
    "coverage",
    "poetry run coverage report -m",
    dir=PROJECT_ROOT,
    deps=all_pysrc_py_files(PROJECT_ROOT) + all_pytest_py_files(PROJECT_ROOT),
    resource_deps=["poetry"],
    labels=["test"],
    allow_parallel=True,
)
local_resource(
    "pre-commit",
    "poetry run pre-commit run --all-files --color always",
    dir=PROJECT_ROOT,
    deps=all_git_files(PROJECT_ROOT),
    resource_deps=["poetry"],
    labels=["test"],
    trigger_mode=TRIGGER_MODE_MANUAL,
    allow_parallel=True,
)
